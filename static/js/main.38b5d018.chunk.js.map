{"version":3,"sources":["types/Status.ts","features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","helpers/filterFunctionForTodos.ts","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["FilterStatusType","actions","todo","type","payload","currentTodoReducer","state","action","query","status","initialFilterParams","all","filterReducer","filterParams","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","dispatch","selectedTodo","visibleTodos","useMemo","condition1","title","toLowerCase","includes","active","completed","filterTodos","length","className","map","id","onClick","currentTodoActions","handleTodoSelection","cn","far","TodoFilter","useState","setQuery","debouncedSetFilterQuery","useCallback","debounce","newQuery","filterActions","onSubmit","event","preventDefault","value","onChange","currentTarget","placeholder","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Loader","TodoModal","user","setUser","isError","setIsError","isLoading","setIsLoading","useEffect","userId","catch","finally","href","email","name","color","App","hasErrorHappened","setHasErrorHappened","todosFromServer","todosActions","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.38b5d018.chunk.js","sourcesContent":["export enum FilterStatusType {\n  all = 'all',\n  active = 'active',\n  completed = 'completed',\n}\n","import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype SelectedTodo = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: SelectedTodo = null,\n  action: Action,\n): SelectedTodo => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { FilterStatusType } from '../types/Status';\n\ntype SetQueryAction = {\n  type: 'filter/SET_QUERY'\n  payload: string,\n};\n\ntype SetStatusAction = {\n  type: 'filter/SET_STATUS'\n  payload: FilterStatusType,\n};\n\nexport const actions = {\n  setQuery: (query: string): SetQueryAction => ({\n    type: 'filter/SET_QUERY',\n    payload: query,\n  }),\n\n  setStatus: (status: FilterStatusType): SetStatusAction => ({\n    type: 'filter/SET_STATUS',\n    payload: status,\n  }),\n};\n\nexport type FilterParams = {\n  query: string,\n  status: FilterStatusType,\n};\n\nconst initialFilterParams: FilterParams = {\n  query: '',\n  status: FilterStatusType.all,\n};\n\ntype Action = SetQueryAction | SetStatusAction;\n\nconst filterReducer = (\n  filterParams: FilterParams = initialFilterParams,\n  action: Action,\n): FilterParams => {\n  switch (action.type) {\n    case 'filter/SET_QUERY':\n      return { ...filterParams, query: action.payload };\n\n    case 'filter/SET_STATUS':\n      return { ...filterParams, status: action.payload };\n\n    default:\n      return filterParams;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetAction = {\n  type: 'todos/SET',\n  payload: Todo[],\n};\n\nexport const actions = {\n  set: (todos: Todo[]): SetAction => ({ type: 'todos/SET', payload: todos }),\n};\n\ntype Action = SetAction;\n\nconst todosReducer = (\n  todos: Todo[] = [],\n  action: Action,\n): Todo[] => {\n  switch (action.type) {\n    case 'todos/SET':\n      return action.payload;\n\n    default:\n      return todos;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","/* eslint-disable max-len */\nimport {\n  FC, useMemo,\n} from 'react';\nimport cn from 'classnames';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { Todo } from '../../types/Todo';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\nimport { filterTodos } from '../../helpers/filterFunctionForTodos';\n\nexport const TodoList: FC = () => {\n  const dispatch = useAppDispatch();\n  const todos = useAppSelector(state => state.todos);\n  const selectedTodo = useAppSelector(state => state.currentTodo);\n\n  const { query, status } = useAppSelector(state => state.filter);\n\n  const handleTodoSelection = (todo: Todo) => {\n    dispatch(currentTodoActions.setTodo(todo));\n  };\n\n  const visibleTodos = useMemo(\n    () => filterTodos(todos, query, status),\n    [todos, query, status],\n  );\n\n  return (\n    <>\n      {\n        todos.length === 0 && (\n          <p className=\"notification is-warning\">\n            There are no todos matching current filter criteria\n          </p>\n        )\n      }\n\n      {\n        todos.length !== 0 && (\n          <table className=\"table is-narrow is-fullwidth\">\n            <thead>\n              <tr>\n                <th>#</th>\n\n                <th>\n                  <span className=\"icon\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                </th>\n\n                <th>Title</th>\n                <th> </th>\n              </tr>\n            </thead>\n\n            <tbody>\n              {\n                visibleTodos.map((todo) => (\n                  <tr\n                    key={todo.id}\n                    data-cy=\"todo\"\n                    className=\"\"\n                  >\n                    <td className=\"is-vcentered\">{todo.id}</td>\n\n                    {\n                      todo.completed\n                        ? (\n                          <td className=\"is-vcentered\">\n                            <span className=\"icon\" data-cy=\"iconCompleted\">\n                              <i className=\"fas fa-check\" />\n                            </span>\n                          </td>\n                        )\n                        : (<td className=\"is-vcentered\" />)\n                    }\n\n                    <td className=\"is-vcentered is-expanded\">\n                      <p\n                        className={`has-text-${todo.completed ? 'success' : 'danger'}`}\n                      >\n                        {todo.title}\n                      </p>\n                    </td>\n                    <td className=\"has-text-right is-vcentered\">\n                      <button\n                        data-cy=\"selectButton\"\n                        className=\"button\"\n                        type=\"button\"\n                        onClick={() => handleTodoSelection(todo)}\n                      >\n                        <span className=\"icon\">\n                          <i\n                            className={cn({\n                              far: true,\n                              'fa-eye': selectedTodo?.id !== todo.id,\n                              'fa-eye-slash': selectedTodo?.id === todo.id,\n                            })}\n                          />\n                        </span>\n                      </button>\n                    </td>\n                  </tr>\n                ))\n              }\n            </tbody>\n          </table>\n        )\n      }\n    </>\n  );\n};\n","import { FilterStatusType } from '../types/Status';\nimport { Todo } from '../types/Todo';\n\nexport const filterTodos = (\n  todos: Todo[],\n  query: string,\n  status: FilterStatusType,\n) => {\n  return todos.filter(todo => {\n    const condition1 = todo.title\n      .toLowerCase()\n      .includes(query.toLowerCase());\n\n    switch (status) {\n      case FilterStatusType.all:\n        return condition1;\n      case FilterStatusType.active:\n        return condition1 && !todo.completed;\n      case FilterStatusType.completed:\n        return condition1 && todo.completed;\n      default:\n        return true;\n    }\n  });\n};\n","import React, { useCallback, useState } from 'react';\nimport debounce from 'lodash.debounce';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as filterActions } from '../../features/filter';\nimport { FilterStatusType } from '../../types/Status';\n\nexport const TodoFilter: React.FC = () => {\n  const [query, setQuery] = useState('');\n\n  const filterParams = useAppSelector(state => state.filter);\n\n  const dispatch = useAppDispatch();\n\n  const setFilterQuery = (newQuery: string) => {\n    dispatch(filterActions.setQuery(newQuery));\n  };\n\n  const debouncedSetFilterQuery = useCallback(\n    debounce(setFilterQuery, 300),\n    [],\n  );\n\n  const handleQueryInput = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.currentTarget.value);\n    debouncedSetFilterQuery(event.currentTarget.value);\n  };\n\n  const handleQueryClear = () => {\n    setQuery('');\n    debouncedSetFilterQuery('');\n  };\n\n  const handleSelectChange = (\n    event: React.ChangeEvent<HTMLSelectElement>,\n  ) => {\n    const { value } = event.currentTarget;\n\n    switch (value) {\n      case FilterStatusType.all:\n        dispatch(filterActions.setStatus(FilterStatusType.all));\n        break;\n      case FilterStatusType.active:\n        dispatch(filterActions.setStatus(FilterStatusType.active));\n        break;\n      case FilterStatusType.completed:\n        dispatch(filterActions.setStatus(FilterStatusType.completed));\n        break;\n      default:\n        break;\n    }\n  };\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={filterParams.status}\n            onChange={handleSelectChange}\n          >\n            <option value={FilterStatusType.all}>All</option>\n            <option value={FilterStatusType.active}>Active</option>\n            <option value={FilterStatusType.completed}>Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={handleQueryInput}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {\n          query && (\n            <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n              {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n              <button\n                data-cy=\"clearSearchButton\"\n                type=\"button\"\n                className=\"delete\"\n                onClick={handleQueryClear}\n              />\n            </span>\n          )\n        }\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { getUser } from '../../api';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\nexport const TodoModal: React.FC = () => {\n  const [user, setUser] = useState<User>();\n  const [isError, setIsError] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const dispatch = useAppDispatch();\n\n  const selectedTodo = useAppSelector(state => state.currentTodo);\n\n  useEffect(() => {\n    if (selectedTodo?.userId) {\n      setIsLoading(true);\n\n      getUser(selectedTodo.userId)\n        .then(setUser)\n        .catch(() => setIsError(true))\n        .finally(() => setIsLoading(false));\n    }\n  }, []);\n\n  const handleTodoRemoving = () => {\n    dispatch(currentTodoActions.removeTodo());\n  };\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n      {\n        isLoading && <Loader />\n      }\n\n      {\n        !isLoading && selectedTodo && (\n          <div className=\"modal-card\">\n            <header className=\"modal-card-head\">\n              <div\n                className=\"modal-card-title has-text-weight-medium\"\n                data-cy=\"modal-header\"\n              >\n                {`Todo #${selectedTodo.id}`}\n              </div>\n\n              {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n              <button\n                type=\"button\"\n                className=\"delete\"\n                data-cy=\"modal-close\"\n                onClick={handleTodoRemoving}\n              />\n            </header>\n\n            <div className=\"modal-card-body\">\n              <p className=\"block\" data-cy=\"modal-title\">\n                {selectedTodo.title}\n              </p>\n\n              {\n                user && (\n                  <p className=\"block\" data-cy=\"modal-user\">\n                    {\n                      selectedTodo.completed\n                        ? <strong className=\"has-text-success\">Done</strong>\n                        : <strong className=\"has-text-danger\">Planned</strong>\n                    }\n\n                    {' by '}\n                    <a href={`mailto:${user.email}`}>\n                      {user.name}\n                    </a>\n                  </p>\n                )\n              }\n\n              {\n                !user && isError && (\n                  <p className=\"block\" data-cy=\"modal-user\">\n                    {\n                      selectedTodo.completed\n                        ? <strong className=\"has-text-success\">Done</strong>\n                        : <strong className=\"has-text-danger\">Planned</strong>\n                    }\n\n                    <p style={{ color: 'red' }}>\n                      can not load user\n                    </p>\n                  </p>\n                )\n              }\n\n            </div>\n          </div>\n        )\n      }\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport {\n  FC,\n  useEffect,\n  useState,\n} from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { actions as todosActions } from './features/todos';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\n\nexport const App: FC = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [hasErrorHappened, setHasErrorHappened] = useState(false);\n\n  const dispatch = useAppDispatch();\n\n  const selectedTodo = useAppSelector(state => state.currentTodo);\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    getTodos()\n      .then((todosFromServer) => {\n        dispatch(todosActions.set(todosFromServer));\n      })\n      .catch(() => setHasErrorHappened(true))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n            <div className=\"block\">\n              {\n                isLoading && <Loader />\n              }\n\n              {\n                !hasErrorHappened && !isLoading && <TodoList />\n              }\n\n              {\n                hasErrorHappened && !isLoading && (\n                  <p className=\"notification is-danger\">\n                    There are no todos matching current filter criteria\n                  </p>\n                )\n              }\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {\n        !!selectedTodo && <TodoModal />\n      }\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}